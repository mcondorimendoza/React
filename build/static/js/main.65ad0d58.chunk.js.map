{"version":3,"sources":["stores/UserStore.js","InputField.js","SubmitButton.js","LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["extendObservable","this","loading","isLoggedIn","username","InputField","className","type","props","placeholder","value","onChange","e","target","React","Component","SubmitButton","disabled","onClick","text","LoginForm","state","password","buttonDisabled","property","val","trim","length","setState","fetch","method","headers","body","JSON","stringify","res","json","result","success","UserStore","resetForm","alert","msg","console","log","setInputValue","doLogin","App","doLogout","observer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wSAiBe,MAXX,aAAe,oBACXA,YAAiBC,KAAO,CAEpBC,SAAS,EACTC,YAAY,EACZC,SAAU,M,QCWPC,E,uKAlBH,IAAD,OACL,OACE,yBAAKC,UAAU,cAEX,2BACIA,UAAU,QACVC,KAAMN,KAAKO,MAAMD,KACjBE,YAAaR,KAAKO,MAAMC,YACxBC,MAAOT,KAAKO,MAAME,MAClBC,SAAW,SAACC,GAAD,OAAO,EAAKJ,MAAMG,SAASC,EAAEC,OAAOH,e,GAXtCI,IAAMC,WCoBhBC,E,uKAlBH,IAAD,OACP,OACE,yBAAKV,UAAU,gBAEX,4BACIA,UAAU,MACVW,SAAUhB,KAAKO,MAAMS,SACrBC,QAAU,kBAAM,EAAKV,MAAMU,YAE1BjB,KAAKO,MAAMW,W,GAXCL,IAAMC,WC6GlBK,E,kDAxGb,WAAYZ,GAAQ,IAAD,8BACf,cAAMA,IACDa,MAAQ,CACTjB,SAAU,GACVkB,SAAU,GACVC,gBAAgB,GALL,E,0DASLC,EAAUC,IACpBA,EAAMA,EAAIC,QACFC,OAAS,IAGjB1B,KAAK2B,SAAL,eACKJ,EAAWC,M,kCAKhBxB,KAAK2B,SAAS,CACVxB,SAAU,GACVkB,SAAU,GACVC,gBAAgB,M,qJAMjBtB,KAAKoB,MAAMjB,S,oDAGXH,KAAKoB,MAAMC,S,wDAIhBrB,KAAK2B,SAAS,CACVL,gBAAgB,I,kBAKAM,MAAM,SAAU,CAC5BC,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjB9B,SAAUH,KAAKoB,MAAMjB,SACrBkB,SAAUrB,KAAKoB,MAAMC,a,cARzBa,E,iBAYeA,EAAIC,O,SAAnBC,E,SACSA,EAAOC,SAClBC,EAAUpC,YAAa,EACvBoC,EAAUnC,SAAWiC,EAAOjC,UAGrBiC,IAA6B,IAAnBA,EAAOC,UACtBrC,KAAKuC,YACLC,MAAMJ,EAAOK,M,kDAMjBC,QAAQC,IAAR,MACA3C,KAAKuC,Y,+IAKD,IAAD,OACP,OACE,yBAAKlC,UAAU,aAAf,mBAGI,kBAAC,EAAD,CACIC,KAAK,OACLE,YAAY,WACZC,MAAOT,KAAKoB,MAAMjB,SAAWH,KAAKoB,MAAMjB,SAAW,GACnDO,SAAW,SAACc,GAAD,OAAS,EAAKoB,cAAc,WAAYpB,MAGvD,kBAAC,EAAD,CACIlB,KAAK,WACLE,YAAY,WACZC,MAAOT,KAAKoB,MAAMC,SAAWrB,KAAKoB,MAAMC,SAAW,GACnDX,SAAW,SAACc,GAAD,OAAS,EAAKoB,cAAc,WAAYpB,MAGvD,kBAAC,EAAD,CACIN,KAAK,QACLF,SAAUhB,KAAKoB,MAAME,eACrBL,QAAU,kBAAM,EAAK4B,gB,GAlGXhC,IAAMC,WCExBgC,G,mUAMgBlB,MAAM,cAAe,CACnCC,OAAQ,OACRC,QAAS,CACP,OAAU,mBACV,eAAgB,sB,cAJhBI,E,gBAQeA,EAAIC,O,QAAnBC,E,SAEUA,EAAOC,SACnBC,EAAUrC,SAAU,EACpBqC,EAAUpC,YAAa,EACvBoC,EAAUnC,SAAWiC,EAAOjC,WAI5BmC,EAAUrC,SAAU,EACpBqC,EAAUpC,YAAa,G,kDAMzBoC,EAAUrC,SAAU,EACpBqC,EAAUpC,YAAa,E,4RAQP0B,MAAM,UAAW,CAC/BC,OAAQ,OACRC,QAAS,CACP,OAAU,mBACV,eAAgB,sB,cAJhBI,E,gBAQeA,EAAIC,O,QAAnBC,E,SAEUA,EAAOC,UACnBC,EAAUpC,YAAa,EACvBoC,EAAUnC,SAAW,I,kDAMvBuC,QAAQC,IAAR,M,+IAKM,IAAD,OAEP,OAAGL,EAAUrC,QAEP,yBAAKI,UAAU,OACX,yBAAKA,UAAU,aAAf,iCASJiC,EAAUpC,WAEV,yBAAKG,UAAU,OACX,yBAAKA,UAAU,aAAf,cACciC,EAAUnC,SAEtB,kBAAC,EAAD,CACIe,KAAM,mBACNF,UAAU,EACVC,QAAU,kBAAM,EAAK8B,gBAU/B,yBAAK1C,UAAU,OACX,yBAAKA,UAAU,aACX,kBAAC,EAAD,Y,GAjGAQ,IAAMC,YA4GTkC,cAASF,GCvGJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.65ad0d58.chunk.js","sourcesContent":["import { extendObservable } from 'mobx';\r\n\r\n/**\r\n * UserStore: Para el almacenamiento de los Usuarios\r\n */\r\nclass UserStore {\r\n    constructor() {\r\n        extendObservable(this,  {\r\n\r\n            loading: true,\r\n            isLoggedIn: false,\r\n            username: ''\r\n\r\n        })\r\n    }\r\n}\r\n\r\nexport default new UserStore();\r\n","import React from 'react';\r\n\r\nclass InputField extends React.Component {\r\n\r\n  render() {\r\n      return (\r\n        <div className=\"inputField\">\r\n\r\n            <input\r\n                className='input'\r\n                type={this.props.type}\r\n                placeholder={this.props.placeholder}\r\n                value={this.props.value}\r\n                onChange={ (e) => this.props.onChange(e.target.value) }\r\n            />\r\n            \r\n        </div>\r\n      );\r\n  }\r\n\r\n}\r\n\r\nexport default InputField;","import React from 'react';\r\n\r\nclass SubmitButton extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"submitButton\">\r\n          \r\n          <button\r\n              className='btn'\r\n              disabled={this.props.disabled}\r\n              onClick={ () => this.props.onClick() }\r\n          >\r\n              {this.props.text}\r\n          </button>\r\n\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default SubmitButton;","import React        from 'react';\r\nimport InputField   from './InputField';\r\nimport SubmitButton from './SubmitButton';\r\nimport UserStore    from './stores/UserStore';\r\n\r\nclass LoginForm extends React.Component {\r\n\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n          username: '',\r\n          password: '',\r\n          buttonDisabled: false\r\n      }\r\n  }\r\n\r\n  setInputValue(property, val) {\r\n      val = val.trim();\r\n      if (val.length > 12) {\r\n          return;\r\n      }\r\n      this.setState({\r\n          [property]: val\r\n      })\r\n  }\r\n\r\n  resetForm() {\r\n      this.setState({\r\n          username: '',\r\n          password: '',\r\n          buttonDisabled: false\r\n      })\r\n  }\r\n\r\n  async doLogin() {\r\n\r\n    if (!this.state.username) {\r\n        return;\r\n    }\r\n    if (!this.state.password) {\r\n        return;\r\n    }\r\n\r\n    this.setState({\r\n        buttonDisabled: true\r\n    })\r\n\r\n    try {\r\n\r\n        let res = await fetch('/login', {\r\n            method: 'post',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                username: this.state.username,\r\n                password: this.state.password\r\n            })\r\n        });\r\n\r\n        let result = await res.json();\r\n        if(result && result.success) {\r\n          UserStore.isLoggedIn = true;\r\n          UserStore.username = result.username;\r\n        }\r\n\r\n        else if (result && result.success === false) {\r\n            this.resetForm();\r\n            alert(result.msg);\r\n        }\r\n \r\n    }\r\n\r\n    catch(e) {\r\n        console.log(e);\r\n        this.resetForm();\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"loginForm\">\r\n\r\n          Formulario Login\r\n          <InputField\r\n              type='text'\r\n              placeholder='username'\r\n              value={this.state.username ? this.state.username : ''}\r\n              onChange={ (val) => this.setInputValue('username', val)  }\r\n          />\r\n\r\n          <InputField\r\n              type='password'\r\n              placeholder='Password'\r\n              value={this.state.password ? this.state.password : ''}\r\n              onChange={ (val) => this.setInputValue('password', val)  }\r\n          />\r\n\r\n          <SubmitButton\r\n              text='Login'\r\n              disabled={this.state.buttonDisabled}\r\n              onClick={ () => this.doLogin}\r\n          />\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginForm;","import React        from 'react';\nimport { observer } from 'mobx-react';\nimport UserStore    from './stores/UserStore';\nimport LoginForm    from './LoginForm';\nimport SubmitButton from './SubmitButton'; \nimport './App.css';\n\nclass App extends React.Component {\n\n  async componentDidMount() {\n\n    try {\n\n      let res = await fetch('/isLoggedIn', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n\n      let result = await res.json();\n\n      if (result && result.success) {\n        UserStore.loading = false;\n        UserStore.isLoggedIn = true;\n        UserStore.username = result.username;\n      }\n\n      else {\n        UserStore.loading = false;\n        UserStore.isLoggedIn = false;\n      }\n\n    }\n\n    catch(e) {\n      UserStore.loading = false;\n      UserStore.isLoggedIn = false;\n    }\n\n  }\n\n  async doLogout() {\n\n    try {\n      let res = await fetch('/logout', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n\n      let result = await res.json();\n\n      if (result && result.success) {\n        UserStore.isLoggedIn = false;\n        UserStore.username = '';\n      }\n\n    }\n\n    catch(e) {\n      console.log(e)\n    }\n    \n  }\n\n  render() {\n\n    if(UserStore.loading) {\n      return (\n          <div className=\"app\">\n              <div className='container'>\n                Cargando, por favor espere..\n              </div>\n          </div>\n      );\n    }\n\n    else {\n\n      if (UserStore.isLoggedIn) {\n        return (\n          <div className=\"app\">\n              <div className='container'>\n                Bienvenido {UserStore.username}\n\n                <SubmitButton\n                    text={'Cerrar SesiÃ³n'}\n                    disabled={false}\n                    onClick={ () => this.doLogout()}\n                />\n\n              </div>\n          </div>\n      );\n\n      }\n\n      return (\n          <div className=\"app\">\n              <div className='container'>\n                  <LoginForm />\n              </div>\n          </div> \n    );\n\n    }\n\n  }\n}\n\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}